import asyncio
import csv
import os
import zipfile
from typing import List, Dict
import streamlit as st
from pydub import AudioSegment
from googletrans import Translator
from gtts import gTTS
from io import StringIO, BytesIO

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
CSV_CACHE_FILE = "transcription_cache.csv"
LAST_SESSION_FILE = "last_session.csv"
AUDIO_FOLDER = "audio_files"
os.makedirs(AUDIO_FOLDER, exist_ok=True)

NORMALIZATION_MAP = {
    'vinere': 'vineri'
}

IPA_REPLACEMENTS = [
    ('ce', 'tÕ° Ée'), ('ci', 'tÕ° Éi'), ('ge', 'dÕ° íe'), ('gi', 'dÕ° íi'),
    ('ch', 'k'), ('gh', 'g'), ('ƒÉ', '…ô'), ('√¢', '…®'), ('√Æ', '…®'),
    ('»ô', ' É'), ('≈£', 'tÕ°s'), ('»õ', 'tÕ°s')
]

RU_REPLACEMENTS = [
    ('ce', '—á–µ'), ('ci', '—á–∏'), ('ge', '–¥–∂–µ'), ('gi', '–¥–∂–∏'),
    ('ch', '–∫'), ('gh', '–≥'), ('ƒÉ', '—ç'), ('√¢', '—ã'), ('√Æ', '—ã'),
    ('»ô', '—à'), ('≈£', '—Ü'), ('»õ', '—Ü'), ('a', '–∞'), ('e', '–µ'),
    ('i', '–∏'), ('o', '–æ'), ('u', '—É'), ('b', '–±'), ('c', '–∫'),
    ('d', '–¥'), ('f', '—Ñ'), ('g', '–≥'), ('h', '—Ö'), ('j', '–∂'),
    ('k', '–∫'), ('l', '–ª'), ('m', '–º'), ('n', '–Ω'), ('p', '–ø'),
    ('q', '–∫'), ('r', '—Ä'), ('s', '—Å'), ('t', '—Ç'), ('v', '–≤'),
    ('w', '–≤'), ('x', '–∫—Å'), ('y', '–∏'), ('z', '–∑')
]

LANG_FLAGS = {
    "ru": "üá∑üá∫ –†—É—Å—Å–∫–∏–π",
    "en": "üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π"
}

translator = Translator()

async def translate_phrase(phrase: str, dest='ru') -> str:
    try:
        translation = await translator.translate(phrase, src='ro', dest=dest)
        return translation.text
    except Exception as e:
        return f"[–æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}]"

def translate_ru_to_ro(phrase: str) -> str:
    try:
        return asyncio.run(translator.translate(phrase, src='ru', dest='ro')).text
    except Exception as e:
        return f"[–æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}]"

def normalize(phrase: str) -> str:
    words = phrase.lower().split()
    return ' '.join(NORMALIZATION_MAP.get(w, w) for w in words)

def apply_replacements(phrase: str, rules: List[tuple]) -> str:
    result = phrase.lower()
    for orig, repl in rules:
        result = result.replace(orig, repl)
    return result

def speak(phrase: str, filename: str, lang='ro'):
    mp3_path = os.path.join(AUDIO_FOLDER, filename)
    if not os.path.exists(mp3_path):
        tts = gTTS(text=phrase, lang=lang)
        tts.save(mp3_path)
    return mp3_path

def load_csv_cache(csv_path: str) -> Dict[str, dict]:
    if not os.path.exists(csv_path):
        return {}
    existing_data = {}
    with open(csv_path, mode="r", encoding="utf-8") as f:
        reader = csv.DictReader(f)
        for row in reader:
            key = (row.get("normalized", "").strip(), row.get("lang", "").strip())
            if key:
                existing_data[key] = row
    return existing_data

def save_csv_file(data: List[dict], csv_path: str):
    with open(csv_path, mode="w", encoding="utf-8", newline="") as f:
        writer = csv.DictWriter(f, fieldnames=["original", "normalized", "ipa", "ru_phonetic", "translation", "lang"])
        writer.writeheader()
        writer.writerows(data)

async def process_phrases(phrases: List[str], cache: Dict[str, dict], lang='ru') -> List[dict]:
    results = []
    for phrase in set(phrases):
        normalized = normalize(phrase)
        cache_key = (normalized, lang)
        if cache_key in cache:
            results.append(cache[cache_key])
            continue
        result = {
            'original': phrase,
            'normalized': normalized,
            'ipa': apply_replacements(normalized, IPA_REPLACEMENTS),
            'ru_phonetic': apply_replacements(normalized, RU_REPLACEMENTS),
            'translation': await translate_phrase(normalized, dest=lang),
            'lang': lang
        }
        cache[cache_key] = result
        results.append(result)
        speak(normalized, f"{normalized.replace(' ', '_')}.mp3")
    return results

def make_zip_of_audio(phrases: List[str], with_translation=False, lang='ru') -> BytesIO:
    zip_buffer = BytesIO()
    with zipfile.ZipFile(zip_buffer, "w") as zip_file:
        for phrase in phrases:
            normalized = normalize(phrase)
            base_name = normalized.replace(' ', '_')
            ro_file = f"{base_name}_ro.mp3"
            ro_path = speak(normalized, ro_file, lang='ro')
            zip_file.write(ro_path, arcname=ro_file)

            if with_translation:
                for row in st.session_state['results']:
                    if row['normalized'] == normalized and row['lang'] == lang:
                        trans_text = row['translation']
                        tr_file = f"{base_name}_{lang}.mp3"
                        tr_path = speak(trans_text, tr_file, lang=lang)

                        # –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Ñ–∞–π–ª
                        merged = AudioSegment.from_file(ro_path) + AudioSegment.silent(duration=500) + AudioSegment.from_file(tr_path)
                        final_path = os.path.join(AUDIO_FOLDER, f"{base_name}_combo.mp3")
                        merged.export(final_path, format="mp3")

                        zip_file.write(final_path, arcname=f"{base_name}_combo.mp3")
    zip_buffer.seek(0)
    return zip_buffer

# === Streamlit UI ===
st.set_page_config(page_title="Romanian Transcriber", layout="wide")
st.title("üìò Romanian Transcriber & Translator")

input_method = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞:", ["–í–≤–æ–¥ –≤—Ä—É—á–Ω—É—é", "–ó–∞–≥—Ä—É–∑–∫–∞ .txt —Ñ–∞–π–ª–∞"])
translation_lang = st.selectbox("–Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞:", [("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "ru"), ("üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "en")])
save_last_session = st.checkbox("–°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –æ—Ç–¥–µ–ª—å–Ω–æ", value=True)
if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –∏ —Å–µ—Å—Å–∏—é"):
    if os.path.exists(CSV_CACHE_FILE):
        os.remove(CSV_CACHE_FILE)
    if os.path.exists(LAST_SESSION_FILE):
        os.remove(LAST_SESSION_FILE)
    st.session_state["results"] = []
    st.session_state["manual_input"] = ""
    st.success("–ö—ç—à –∏ —Å–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω—ã.")

phrases = []

if 'manual_input' not in st.session_state:
    st.session_state['manual_input'] = ""

if input_method == "–í–≤–æ–¥ –≤—Ä—É—á–Ω—É—é":
    st.subheader("‚ûï –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ (—Å –ª—é–±–æ–≥–æ —è–∑—ã–∫–∞ ‚Üí –Ω–∞ —Ä—É–º—ã–Ω—Å–∫–∏–π):")
    lang_detect = st.selectbox("–ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫:", [("–†—É—Å—Å–∫–∏–π", "ru"), ("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "en")], key="lang_detect")
    ru_input = st.text_input("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ñ—Ä–∞–∑—É:", key="text_to_translate")
    if st.button("–î–æ–±–∞–≤–∏—Ç—å –≤–æ –≤–≤–æ–¥", key="add_input_translated"):
        try:
            ro_phrase = asyncio.run(translator.translate(ru_input, src=lang_detect[1], dest='ro')).text
            st.session_state['manual_input'] += ("" if st.session_state['manual_input'] else "") + ro_phrase.strip()
        except Exception as e:
            st.warning(f"[–æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}]")

    st.subheader("üì• –í–≤–µ–¥–∏—Ç–µ —Ñ—Ä–∞–∑—ã (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É):")
    if st.button("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ—Ä–∞–∑—ã –∏–∑ –∫—ç—à–∞"):
        try:
            with open(CSV_CACHE_FILE, mode="r", encoding="utf-8") as f:
                reader = csv.DictReader(f)
                cached_lines = sorted(set(row["original"] for row in reader if row.get("original")))
                st.session_state['manual_input'] = "\n".join(cached_lines)
                st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(cached_lines)} —Ñ—Ä–∞–∑ –∏–∑ –∫—ç—à–∞.")
        except Exception as e:
            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—ç—à: {e}")
    st.session_state['manual_input'] = st.text_area("", value=st.session_state['manual_input'], height=200)
    if st.session_state['manual_input'].strip():
        phrases = [line.strip() for line in st.session_state['manual_input'].splitlines() if line.strip()]
else:
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ .txt —Ñ–∞–π–ª", type=["txt"])
    if uploaded_file:
        stringio = StringIO(uploaded_file.getvalue().decode("utf-8"))
        phrases = [line.strip() for line in stringio if line.strip()]

if 'results' not in st.session_state:
    st.session_state['results'] = []

if phrases:
    if st.button("‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∞—Ç—å"):
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞..."):
            cache = load_csv_cache(CSV_CACHE_FILE)
            results = asyncio.run(process_phrases(phrases, cache, lang=translation_lang[1]))
            save_csv_file(list(cache.values()), CSV_CACHE_FILE)
            if save_last_session:
                save_csv_file(results, LAST_SESSION_FILE)
            st.session_state['results'] = results
        st.success("‚úÖ –ì–æ—Ç–æ–≤–æ!")

if st.session_state['results']:
    col1, col2 = st.columns([3, 1])
    with col1:
        filter_text = st.text_input("üîç –§–∏–ª—å—Ç—Ä –ø–æ —Ñ—Ä–∞–∑–µ –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥—É:")
    with col2:
        lang_filter = st.selectbox("üåç –Ø–∑—ã–∫:", ["–í—Å–µ", "ru", "en"], format_func=lambda x: LANG_FLAGS.get(x, "üåê –í—Å–µ") if x != "–í—Å–µ" else "üåê –í—Å–µ")

    filtered = []
    for row in st.session_state['results']:
        if (not filter_text or (
            filter_text.lower() in row['original'].lower()
            or filter_text.lower() in row['translation'].lower()
        )) and (lang_filter == "–í—Å–µ" or row['lang'] == lang_filter):
            filtered.append(row)

    st.download_button("üì• –°–∫–∞—á–∞—Ç—å CSV", data=open(LAST_SESSION_FILE if save_last_session else CSV_CACHE_FILE, "rb"), file_name="results.csv")

    audio_zip = make_zip_of_audio([row['original'] for row in filtered])
    st.download_button("üîä –°–∫–∞—á–∞—Ç—å MP3 (–∞—Ä—Ö–∏–≤)", data=audio_zip, file_name="audio_files.zip")

    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    st.dataframe(filtered, use_container_width=True)

    st.subheader("üéß –ü—Ä–æ—Å–ª—É—à–∞—Ç—å –æ–∑–≤—É—á–∫—É:")
    if st.button("‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤—Å—ë (—Ä—É–º—ã–Ω—Å–∫–∏–π)"):
        combined = AudioSegment.empty()
        for row in filtered:
            normalized = row['normalized']
            filename = f"{normalized.replace(' ', '_')}_ro.mp3"
            path = speak(normalized, filename, lang='ro')
            if os.path.exists(path):
                combined += AudioSegment.from_file(path) + AudioSegment.silent(duration=300)
        buffer = BytesIO()
        combined.export(buffer, format="mp3")
        buffer.seek(0)
        st.audio(buffer, format="audio/mp3")


    for row in filtered:
        normalized = row['normalized']
        filename = f"{normalized.replace(' ', '_')}_ro.mp3"
        path = speak(normalized, filename, lang='ro')
        if os.path.exists(path):
            st.markdown(f"**{row['original']}**")
            st.audio(path, format="audio/mp3")

    if st.checkbox("üîÅ –í–∫–ª—é—á–∏—Ç—å –¥–≤–æ–π–Ω—É—é –æ–∑–≤—É—á–∫—É (ro ‚Üí –ø–µ—Ä–µ–≤–æ–¥)"):
        double_zip = make_zip_of_audio([row['original'] for row in filtered], with_translation=True, lang=translation_lang[1])
        st.download_button("üì• –°–∫–∞—á–∞—Ç—å –¥–≤–æ–π–Ω—É—é –æ–∑–≤—É—á–∫—É (zip)", data=double_zip, file_name="combo_audio.zip")
else:
    st.info("–í–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ñ—Ä–∞–∑—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
