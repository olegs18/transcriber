# === –ò–º–ø–æ—Ä—Ç—ã –∏ –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ===
import asyncio
import csv
import os
import zipfile
from typing import List, Dict
import streamlit as st
from pydub import AudioSegment
from googletrans import Translator
from gtts import gTTS
from io import StringIO, BytesIO
import base64
from datetime import datetime

# === –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∏ –ø–∞–ø–∫–∞–º ===
CSV_CACHE_FILE = "transcription_cache.csv"
LAST_SESSION_FOLDER = "sessions"
AUDIO_FOLDER = "audio_files"
os.makedirs(AUDIO_FOLDER, exist_ok=True)
os.makedirs(LAST_SESSION_FOLDER, exist_ok=True)

# === –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) ===
NORMALIZATION_MAP = {
    'vinere': 'vineri'  # –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
}

# === –ó–∞–º–µ–Ω–∏—Ç–µ–ª–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —Ä—É–º—ã–Ω—Å–∫–æ–≥–æ –≤ IPA ===
IPA_REPLACEMENTS = [
    ('ce', 'tÕ° Ée'), ('ci', 'tÕ° Éi'), ('ge', 'dÕ° íe'), ('gi', 'dÕ° íi'),
    ('ch', 'k'), ('gh', 'g'), ('ƒÉ', '…ô'), ('√¢', '…®'), ('√Æ', '…®'),
    ('»ô', ' É'), ('≈£', 'tÕ°s'), ('»õ', 'tÕ°s')
]

# === –†—É—Å—Å–∫–∞—è –ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω–∞—è —Ñ–æ–Ω–µ—Ç–∏–∫–∞ ===
RU_REPLACEMENTS = [
    ('ce', '—á–µ'), ('ci', '—á–∏'), ('ge', '–¥–∂–µ'), ('gi', '–¥–∂–∏'),
    ('ch', '–∫'), ('gh', '–≥'), ('ƒÉ', '—ç'), ('√¢', '—ã'), ('√Æ', '—ã'),
    ('»ô', '—à'), ('≈£', '—Ü'), ('»õ', '—Ü'), ('a', '–∞'), ('e', '–µ'),
    ('i', '–∏'), ('o', '–æ'), ('u', '—É'), ('b', '–±'), ('c', '–∫'),
    ('d', '–¥'), ('f', '—Ñ'), ('g', '–≥'), ('h', '—Ö'), ('j', '–∂'),
    ('k', '–∫'), ('l', '–ª'), ('m', '–º'), ('n', '–Ω'), ('p', '–ø'),
    ('q', '–∫'), ('r', '—Ä'), ('s', '—Å'), ('t', '—Ç'), ('v', '–≤'),
    ('w', '–≤'), ('x', '–∫—Å'), ('y', '–∏'), ('z', '–∑')
]

# === –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤ –¥–ª—è —è–∑—ã–∫–æ–≤ ===
LANG_FLAGS = {
    "ru": "üá∑üá∫ –†—É—Å—Å–∫–∏–π",
    "en": "üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
    "ro": "üá∑üá¥ –†—É–º—ã–Ω—Å–∫–∏–π"
}

translator = Translator()

# === –ü–µ—Ä–µ–≤–æ–¥ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ ===
async def translate_phrase(phrase: str, dest='ru') -> str:
    try:
        translation = await translator.translate(phrase, src='ro', dest=dest)
        return translation.text
    except Exception as e:
        return f"[–æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}]"

def translate_ru_to_ro(phrase: str) -> str:
    try:
        return asyncio.run(translator.translate(phrase, src='ru', dest='ro')).text
    except Exception as e:
        return f"[–æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}]"

def normalize(phrase: str) -> str:
    words = phrase.lower().split()
    return ' '.join(NORMALIZATION_MAP.get(w, w) for w in words)

def apply_replacements(phrase: str, rules: List[tuple]) -> str:
    result = phrase.lower()
    for orig, repl in rules:
        result = result.replace(orig, repl)
    return result

def speak(phrase: str, filename: str, lang='ro'):
    mp3_path = os.path.join(AUDIO_FOLDER, filename)
    if not os.path.exists(mp3_path):
        tts = gTTS(text=phrase, lang=lang)
        tts.save(mp3_path)
    return mp3_path

def load_csv_cache(csv_path: str) -> Dict[str, dict]:
    if not os.path.exists(csv_path):
        return {}
    existing_data = {}
    with open(csv_path, mode="r", encoding="utf-8") as f:
        reader = csv.DictReader(f)
        for row in reader:
            key = (row.get("normalized", "").strip(), row.get("lang", "").strip())
            if key:
                existing_data[key] = row
    return existing_data

def save_csv_file(data: List[dict], csv_path: str):
    with open(csv_path, mode="w", encoding="utf-8", newline="") as f:
        writer = csv.DictWriter(f, fieldnames=["original", "normalized", "ipa", "ru_phonetic", "translation", "lang", "known"])
        writer.writeheader()
        writer.writerows(data)

async def process_phrases(phrases: List[str], cache: Dict[str, dict], lang='ru', study_lang_code='ro') -> List[dict]:
    results = []
    for phrase in set(phrases):
        normalized = normalize(phrase)
        cache_key = (normalized, lang)
        if cache_key in cache:
            results.append(cache[cache_key])
            continue
        result = {
            'original': phrase,
            'normalized': normalized,
            'ipa': apply_replacements(normalized, IPA_REPLACEMENTS if study_lang_code == 'ro' else []),
            'ru_phonetic': apply_replacements(normalized, RU_REPLACEMENTS if study_lang_code == 'ro' else []),
            'translation': await translate_phrase(normalized, dest=lang if lang != study_lang_code else 'ru'),
            'lang': lang,
            'known': '‚ùå'
        }
        cache[cache_key] = result
        results.append(result)
        speak(normalized, f"{normalized.replace(' ', '_')}_{study_lang_code}.mp3", lang=study_lang_code)
    return results

def make_zip_of_audio(phrases: List[str], results: List[dict], with_translation=False, lang='ru', study_lang_code='ro') -> BytesIO:
    zip_buffer = BytesIO()
    with zipfile.ZipFile(zip_buffer, "w") as zip_file:
        for row in results:
            normalized = row['normalized']
            base_name = normalized.replace(' ', '_')
            ro_file = f"{base_name}_{study_lang_code}.mp3"
            ro_path = speak(normalized, ro_file, lang=study_lang_code)
            zip_file.write(ro_path, arcname=ro_file)

            if with_translation:
                trans_text = row['translation']
                tr_file = f"{base_name}_{lang}.mp3"
                tr_path = speak(trans_text, tr_file, lang=lang)
                merged = AudioSegment.from_file(ro_path) + AudioSegment.silent(duration=500) + AudioSegment.from_file(tr_path)
                final_path = os.path.join(AUDIO_FOLDER, f"{base_name}_combo.mp3")
                merged.export(final_path, format="mp3")
                zip_file.write(final_path, arcname=f"{base_name}_combo.mp3")
    zip_buffer.seek(0)
    return zip_buffer
# === Streamlit UI ===
st.set_page_config(page_title="Romanian Transcriber", layout="wide")
st.title("üìò Transcriber & Translator")

# === –í—ã–±–æ—Ä —è–∑—ã–∫–∞ –∏–∑—É—á–µ–Ω–∏—è ===
study_lang = st.selectbox("üß† –Ø–∑—ã–∫ –∏–∑—É—á–µ–Ω–∏—è:", ["–†—É–º—ã–Ω—Å–∫–∏–π (ro)", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π (en)"], index=0)
study_lang_code = "ro" if "ro" in study_lang else "en"

# === –í—ã–±–æ—Ä –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–µ—Å—Å–∏–π ===
session_files = [f for f in os.listdir(LAST_SESSION_FOLDER) if f.endswith(".csv")]
load_session = st.selectbox("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏—é:", ["(–Ω–µ –≤—ã–±—Ä–∞–Ω–∞)"] + session_files)

# === –ú–µ—Ç–æ–¥ –≤–≤–æ–¥–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
input_method = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞:", ["–í–≤–æ–¥ –≤—Ä—É—á–Ω—É—é", "–ó–∞–≥—Ä—É–∑–∫–∞ .txt —Ñ–∞–π–ª–∞"])
translation_lang = st.selectbox("–Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞:", [(LANG_FLAGS['ru'], "ru"), (LANG_FLAGS['en'], "en")])
save_last_session = st.checkbox("–°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –æ—Ç–¥–µ–ª—å–Ω–æ", value=True)

phrases = []

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state ===
if 'manual_input' not in st.session_state:
    st.session_state['manual_input'] = ""
if 'results' not in st.session_state:
    st.session_state['results'] = []

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ ===
if load_session != "(–Ω–µ –≤—ã–±—Ä–∞–Ω–∞)":
    try:
        with open(os.path.join(LAST_SESSION_FOLDER, load_session), mode="r", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            st.session_state['results'] = list(reader)
        st.success(f"–°–µ—Å—Å–∏—è {load_session} –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ ===
if input_method == "–í–≤–æ–¥ –≤—Ä—É—á–Ω—É—é":
    ru_input = st.text_input("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ñ—Ä–∞–∑—É (–ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É–º—ã–Ω—Å–∫–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω):")
    if st.button("–î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥", key="add_translation"):
        try:
            ro_phrase = asyncio.run(translator.translate(ru_input, src=translation_lang[1], dest='ro')).text
            st.session_state['manual_input'] += ("\n" if st.session_state['manual_input'] else "") + ro_phrase.strip()
        except Exception as e:
            st.warning(f"[–æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}]")
    st.session_state['manual_input'] = st.text_area("üì• –í–≤–µ–¥–∏—Ç–µ —Ñ—Ä–∞–∑—ã (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫–µ):", value=st.session_state['manual_input'], height=200)
    if st.session_state['manual_input'].strip():
        phrases = [line.strip() for line in st.session_state['manual_input'].splitlines() if line.strip()]
else:
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ .txt —Ñ–∞–π–ª", type=["txt"])
    if uploaded_file:
        stringio = StringIO(uploaded_file.getvalue().decode("utf-8"))
        phrases = [line.strip() for line in stringio if line.strip()]

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—Ä–∞–∑ ===
if phrases and st.button("‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∞—Ç—å"):
    with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞..."):
        cache = load_csv_cache(CSV_CACHE_FILE)
        results = asyncio.run(process_phrases(phrases, cache, lang=translation_lang[1], study_lang_code=study_lang_code))
        save_csv_file(list(cache.values()), CSV_CACHE_FILE)
        if save_last_session:
            session_name = f"session_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            save_csv_file(results, os.path.join(LAST_SESSION_FOLDER, session_name))
        st.session_state['results'] = results
    st.success("‚úÖ –ì–æ—Ç–æ–≤–æ!")

# === –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ ===
if st.session_state['results']:
    st.markdown("---")
    tabs = st.tabs(["üìã –¢–∞–±–ª–∏—Ü–∞", "üß† –ö–∞—Ä—Ç–æ—á–∫–∏ (Flashcards)"])

    # === –í–∫–ª–∞–¥–∫–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π ===
    with tabs[0]:
        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")

        filter_text = st.text_input("üîç –§–∏–ª—å—Ç—Ä –ø–æ —Ñ—Ä–∞–∑–µ –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥—É:")
        filtered = [row for row in st.session_state['results']
                    if filter_text.lower() in row['original'].lower() or filter_text.lower() in row['translation'].lower()]

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª–µ known –µ—Å—Ç—å
        df_display = [{**r, 'known': r.get('known', '‚ùå')} for r in filtered]
        st.session_state['results'] = df_display

        # === –ü—Ä–æ–≥—Ä–µ—Å—Å ===
        total = len(df_display)
        known = sum(1 for row in df_display if row.get('known') == '‚úÖ')
        percent = int(100 * known / total) if total > 0 else 0
        st.markdown(f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: **{known} –∏–∑ {total}** ({percent}%)")
        st.progress(percent)

        # –¢–∞–±–ª–∏—Ü–∞
        st.dataframe(df_display, use_container_width=True)

        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º", key="save_known"):
            save_csv_file(df_display, CSV_CACHE_FILE)
            st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")

    # === –í–∫–ª–∞–¥–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ ===
    with tabs[1]:
        st.subheader("üß† –£—á–∏–º —Ñ—Ä–∞–∑—ã")

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ –∫–∞–∂–¥—ã–π —Ä–µ–Ω–¥–µ—Ä –∏–∑ session_state
        df_display = [{**r, 'known': r.get('known', '‚ùå')} for r in st.session_state['results']]

        for idx, row in enumerate(df_display):
            with st.expander(f"{row['original']} ‚Üí {row['translation']}", expanded=False):
                st.markdown(f"IPA: `{row['ipa']}`")
                st.markdown(f"–§–æ–Ω–µ—Ç–∏–∫–∞: `{row['ru_phonetic']}`")
                audio_path = speak(row['normalized'], f"{row['normalized'].replace(' ', '_')}_{study_lang_code}.mp3", lang=study_lang_code)
                st.audio(audio_path)

                col1, col2 = st.columns(2)

                # –û—Ç–¥–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏, —á—Ç–æ–±—ã Streamlit –∑–Ω–∞–ª, –∫–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞
                if col1.button("‚úÖ –ó–Ω–∞—é", key=f"know_btn_{idx}"):
                    st.session_state['results'][idx]['known'] = '‚úÖ'

                if col2.button("‚ùå –ù–µ –∑–Ω–∞—é", key=f"dontknow_btn_{idx}"):
                    st.session_state['results'][idx]['known'] = '‚ùå'

        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏", key="save_cards"):
            save_csv_file(st.session_state['results'], CSV_CACHE_FILE)
            st.success("–ö–∞—Ä—Ç–æ—á–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
